@page "/"

@using System.Linq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Xml
@using System.Xml.Linq
@using Panels_And_Forms.Services
@using Panels_And_Forms.Models

<MudContainer MaxWidth="MaxWidth.Large" Class="mud-theme-secondary">
    @foreach(string state in statesFromXml)
    {
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            OnClick="() => StateClick(state)"
        >
            @state
        </MudButton>
    }
    <hr />
    @foreach(FirstNameTreeDiagramButton buttonInfo in firstNamesFromXml)
    {
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Warning"
            OnClick="() => IdentifierClick(buttonInfo)"
        >
            @(buttonInfo.state + " + " + buttonInfo.name)
        </MudButton>
    }
    <hr />
    @* @foreach(string city in citiesFromXml)
    {
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Info"
            OnClick="() => IdentifierClick(city)"
        >
            @city
        </MudButton>
    }
    <hr /> *@
    @foreach (PanelItem item in panelItems)
    {
        <MudExpansionPanel Text="@item.Text" IsExpanded="@item.IsExpanded">
            @if(item.ShowForms)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => ShowPreview(item.Text)">Show Preview</MudButton>
                <FormController
                    xmlString="@xmlString"
                    showForms="item.ShowForms"
                    previewClickInformation="previewClickInformation"
                    OnFormSave="HandleSave"
                />
            }
            else
            {
                <Preview
                    state="@item.Text"
                    previewModel="@GetPreviewJToken(item.Text)"
                    OnChildClick="HandleChildClick"
                />
            }
        </MudExpansionPanel>
    }
</MudContainer>

@* <div>@xmlString</div>
<div>@jsonString</div> *@

@code {
    private string jsonString { get; set; } = "";
    private string xmlString { get; set; } = XmlConfig.Data();
    public class PanelItem
    {
        public string Text { get; set; } = "";
        public bool IsExpanded { get; set; } = false;
        public bool ShowForms { get; set; } = false;
    }
    private List<string> statesFromXml { get; set; } = new();
    private List<FirstNameTreeDiagramButton> firstNamesFromXml { get; set; } = new();
    private List<string> citiesFromXml { get; set; } = new();
    private List<PanelItem> panelItems { get; set; } = new();
    private PreviewClickInformation previewClickInformation { get; set; } = new();

    public class FirstNameTreeDiagramButton
    {
        public string state { get; set; } = "";
        public string name { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        // Load XML string into XDocument
        XDocument xmlDoc = XDocument.Parse(xmlString);

        // Convert XML to JSON
        jsonString = JsonConvert.SerializeXNode(xmlDoc);

        GetStates();
        GetFirstNames();
        GetCities();
    }
    private void GetStates()
    {
        JObject jsonObject = JObject.Parse(jsonString);

        JObject rootObject = (JObject)jsonObject["root"];

        statesFromXml = new();
        panelItems = new();

        foreach (var state in rootObject)
        {
            statesFromXml.Add(state.Key);
            panelItems.Add(
                new PanelItem { Text = state.Key, }
            );
        }
    }
    private void GetFirstNames()
    {
        firstNamesFromXml = new();
        JObject jsonObject = JObject.Parse(jsonString);

        JObject rootObject = (JObject)jsonObject["root"];

        foreach (var state in rootObject)
        {
            if (state.Value is JArray)
            {
                foreach (var person in state.Value)
                {
                    firstNamesFromXml.Add(
                        new FirstNameTreeDiagramButton(){state = state.Key, name = person["FirstName"].ToString()}
                    );
                    @* firstNamesFromXml.Add(state.Key + " + " + person["FirstName"].ToString()); *@
                }
            }
            else
            {
                firstNamesFromXml.Add(
                        new FirstNameTreeDiagramButton(){state = state.Key, name = state.Value["FirstName"].ToString()}
                    );
                @* firstNamesFromXml.Add(state.Key + " + " + state.Value["FirstName"].ToString()); *@
            }
        }
    }
    private void GetCities()
    {
        JObject jsonObject = JObject.Parse(jsonString);

        JObject rootObject = (JObject)jsonObject["root"];

        foreach (var state in rootObject)
        {
            if (state.Value is JArray)
            {
                foreach (var person in state.Value)
                {
                    if(person["City"] != null)
                    {
                        citiesFromXml.Add(state.Key + " + " + person["City"]["Name"].ToString());
                    }
                    
                }
            }
            else
            {
                if(state.Value["City"] != null)
                {
                    citiesFromXml.Add(state.Key + " + " + state.Value["City"]["Name"].ToString());
                }
            }
        }
    }
    private void StateClick(string state)
    {
        foreach(PanelItem item in panelItems)
        {
            if(item.Text != state)
            {
                item.IsExpanded = false;
                item.ShowForms = false;
            }
            else
            {
                item.IsExpanded = !item.IsExpanded;
                item.ShowForms = false;
            }
        }
    }
    private void IdentifierClick(FirstNameTreeDiagramButton buttonInfo)
    {
        previewClickInformation = new(){State = buttonInfo.state, FirstName = buttonInfo.name, City = null};
        foreach(PanelItem item in panelItems)
        {
            if(buttonInfo.state.Contains(item.Text))
            {
                item.IsExpanded = true;
                item.ShowForms = true;
            }
            else
            {
                item.IsExpanded = false;
                item.ShowForms = false;
            }
        }
    }
    private void ShowPreview(string headerText)
    {
        foreach(PanelItem item in panelItems)
        {
            if(item.Text != headerText)
            {
                item.IsExpanded = false;
            }
            else
            {
                item.IsExpanded = true;
                item.ShowForms = false;
            }
        }
    }
    private JToken? GetPreviewJToken(string state)
    {
        JObject jsonObject = JObject.Parse(jsonString);

        return jsonObject["root"][state];
    }
    private void HandleChildClick(PreviewClickInformation info)
    {
        // Logic to handle the click event in the parent component
        foreach(PanelItem item in panelItems)
        {
            if(info.State == item.Text)
            {
                item.IsExpanded = true;
                item.ShowForms = true;
            }
            else
            {
                item.IsExpanded = false;
                item.ShowForms = false;
            }
        }
        previewClickInformation = info;
        Console.WriteLine($"Child component clicked! Message: {info.State} | {info.FirstName} | {info.City}");
    }

    private void HandleSave(string message)
    {
        xmlString = message;
        // Load XML string into XDocument
        XDocument xmlDoc = XDocument.Parse(xmlString);

        // Convert XML to JSON
        jsonString = JsonConvert.SerializeXNode(xmlDoc);
        GetStates();
        GetFirstNames();
        foreach(PanelItem item in panelItems)
        {
            if(previewClickInformation.State.Contains(item.Text))
            {
                item.IsExpanded = true;
                item.ShowForms = true;
            }
            else
            {
                item.IsExpanded = false;
                item.ShowForms = false;
            }
        }
    }
}
