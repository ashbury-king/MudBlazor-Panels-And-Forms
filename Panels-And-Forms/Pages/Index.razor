@page "/"

@using System.Linq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Xml
@using System.Xml.Linq
@using Panels_And_Forms.Services

<MudContainer MaxWidth="MaxWidth.Large" Class="mud-theme-secondary">
    @foreach(string state in statesFromXml)
    {
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            OnClick="() => StateClick(state)"
        >
            @state
        </MudButton>
    }
    <hr />
    @foreach(string firstName in firstNamesFromXml)
    {
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Warning"
        >
            @firstName
        </MudButton>
    }
    <hr />
    @foreach(string city in citiesFromXml)
    {
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Info"
        >
            @city
        </MudButton>
    }
    <hr />
    @foreach (PanelItem item in panelItems)
    {
        <MudExpansionPanel Text="@item.Text" IsExpanded="@item.IsExpanded">
            @if(item.ShowPreview)
            {
                <span>Show Preview</span>
            }
            else if(item.ShowForms)
            {
                <span>Show Form</span>
            }
            else
            {
                <span>Edge Case</span>
            }
        </MudExpansionPanel>
    }
</MudContainer>

@xmlString
<hr />
@jsonString

@code {
    private string jsonString { get; set; } = "";
    private string xmlString { get; set; } = XmlConfig.Data();
    public class PanelItem
    {
        public string Text { get; set; } = "";
        public bool IsExpanded { get; set; } = false;
        public bool ShowPreview { get; set; } = false;
        public bool ShowForms { get; set; } = false;
    }

    private List<string> statesFromXml { get; set; } = new();
    private List<string> firstNamesFromXml { get; set; } = new();
    private List<string> citiesFromXml { get; set; } = new();
    private List<PanelItem> panelItems { get; set; } = new();

    protected override void OnInitialized()
    {
        // Load XML string into XDocument
        XDocument xmlDoc = XDocument.Parse(xmlString);

        // Convert XML to JSON
        jsonString = JsonConvert.SerializeXNode(xmlDoc);

        GetStates();
        GetFirstNames();
        GetCities();
    }

    private void GetStates()
    {
        JObject jsonObject = JObject.Parse(jsonString);

        JObject rootObject = (JObject)jsonObject["root"];

        statesFromXml = new();
        panelItems = new();

        foreach (var state in rootObject)
        {
            statesFromXml.Add(state.Key);
            panelItems.Add(
                new PanelItem { Text = state.Key, }
            );
        }
    }

    private void GetFirstNames()
    {
        JObject jsonObject = JObject.Parse(jsonString);

        JObject rootObject = (JObject)jsonObject["root"];

        foreach (var state in rootObject)
        {
            if (state.Value is JArray)
            {
                foreach (var person in state.Value)
                {
                    firstNamesFromXml.Add(state.Key + " + " + person["FirstName"].ToString());
                }
            }
            else
            {
                firstNamesFromXml.Add(state.Key + " + " + state.Value["FirstName"].ToString());
            }
        }
    }

    private void GetCities()
    {
        JObject jsonObject = JObject.Parse(jsonString);

        JObject rootObject = (JObject)jsonObject["root"];

        foreach (var state in rootObject)
        {
            if (state.Value is JArray)
            {
                foreach (var person in state.Value)
                {
                    if(person["City"] != null)
                    {
                        citiesFromXml.Add(state.Key + " + " + person["City"]["Name"].ToString());
                    }
                    
                }
            }
            else
            {
                if(state.Value["City"] != null)
                {
                    citiesFromXml.Add(state.Key + " + " + state.Value["City"]["Name"].ToString());
                }
            }
        }
    }

    

    private void StateClick(string state)
    {
        foreach(PanelItem item in panelItems)
        {
            if(item.Text != state)
            {
                item.IsExpanded = false;
                item.ShowPreview = false;
                item.ShowForms = false;
            }
            else
            {
                item.IsExpanded = !item.IsExpanded;
                if(item.IsExpanded)
                {
                    item.ShowPreview = true;
                }
                item.ShowForms = false;
            }
        }
    }
}
